using *;

local interface BaseError {
	__tostring;
}

local class Error implements BaseError {
	__init(...)=> @values = table.from_generator(fnl.map(tostring, {...}));
	__tostring()=> return table.concat(@values, ",");
}

local prepare(value)-> {
	return (?: (== type(value) 'string') ("%q"):format(value) tostring(value));
}

-- TODO: interfaces, also add __interface in class()
local is(obj, _class)-> {
	if (!= type(obj) "table")
		return;
	if (&& obj.__class (!= obj.__class _class))
		if (getmetatable(_class)).__index
			return is(obj, (getmetatable(_class)).__index);
}

local class TypeError extends BaseError {
	__init(value, ...)=>
		@value, @type, @expected = value, type(value), {...};

	__tostring()=>
		return ("%s: {value=%s, type=%q, expected=%s}"):format(
			tostring(@__class), @value, @type, ("[%s]"):format(table.concat(
			table.from_generator(fnl.map(prepare, @expected)), ", ")));
}

local assert = setmetatable({
	is = \value, ... -> {
		local _type = type(value);
		local types = {...};
		local has_type = false;
		for (_, possible_type in pairs(types))
			if (|| (== possible_type _type) is(value, possible_type))
				return;
		error(TypeError(value, ...));
	}
}, {
	__call = \truthy, val, ... => {
		if (! truthy)
			if (|| (== type(val) "function") (&& getmetatable(val)
					(getmetatable(val)).__call))
				error(((val)(...)));
			else
				error(val, ...);
		else
			return truthy, val, ...;
}});

local class Try {
	__init(fn)=> {
		local result = {pcall(fn)};
		if (! table.remove(result, 1)) {
			@error = result;
			@has_error = true;
		} else {
			@has_error = false;
			return table.unpack(result);
		}
	}
	catch(error_class, handler)=> {
		if @fired
			return;
		if (&& @has_error is(@error[1], error_class)) {
			handler(@error);
			@fired = true;
		}
	}
}

return {
	assert = assert,
	Error = Error,
	BaseError = BaseError,
	TypeError = TypeError,
	Try = Try,
	is_class = is
};
